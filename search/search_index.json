{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":""},{"location":"Forge/","title":"Index","text":""},{"location":"SDK/","title":"Index","text":""},{"location":"Settlers4/","title":"About","text":"<p>This documentation provides an overview of how Settlers 4 works internally. It is intended for developers who want to understand the game's architecture, or modify its behavior.</p> <p>The goal of this documentation is to be a glossar on interesting pointers, basic concepts and class definitions. </p>"},{"location":"Settlers4/#getting-started","title":"Getting Started","text":"<p>It is recommended to have a basic understanding of reverse engineering and C++/asm86 before beginning. Tools like IDA Pro, Ghidra, or x64dbg can be very helpful for exploring the game's binary.</p> <p>Due to the nature of reverse engineering with those different tools, there is no one complete set of binary documentation (function arguments, structs, etc.) available. A good start is the <code>S4_MainR.pdb</code> distributed by Settlers United (Link soon). It gives you all known function names and some global variables.</p> <p>If you wish to update that debug database, please reach out to any of the maintainers of S4Forge (but mainly @WizzardMaker) We are also happy to help you get started or if you have any questions!</p> <p>Another great source on how the game works is S4Forge itself. Most APIs there have to interact with the game in some way, so you can find a lot of useful information in the codebase. For a definition of the most important classes, check out the header files that are used for code generation in S4Forge.</p>"},{"location":"Settlers4/#concepts","title":"Concepts","text":"<p>There are various systems at work in Settlers 4. These can be broadly categorized into the following areas:</p> <ul> <li>Game Logic: This includes the event handling, player actions, AI behavior, and game state management.</li> <li>Rendering: This encompasses the graphics engine, sprite management, and visual effects.</li> <li>User Interface: This involves menus, UI elements, and user input handling.</li> <li>Networking: This covers multiplayer functionality.</li> </ul>"},{"location":"Settlers4/Basics/strings/","title":"String Handling","text":"<p>Settlers 4 uses the <code>std::wstring</code> class from the C++ Standard Library to handle strings.</p> <p>This means it's structure looks more or less like this: C++<pre><code>struct wstring\n{\n    union {\n      __int16 *text;\n      __int16 buffer[8];\n    } storage; // (1)\n    int size;\n    int capacity;\n};\n</code></pre></p> <ol> <li>See this blog post    In short: Small strings (up to 7 characters) are stored directly in the <code>wstring</code> object, longer strings are allocated on the heap and the <code>text</code> pointer points to that memory.</li> </ol> <p>Main problem is, that the compiler rather aggressively inlined a lot of string functions, especially the check whether a string is small or not. This means that you will often find code like this: C++<pre><code>wstring *dest;\nif ( src-&gt;capacity &lt; 8u )\n    dest = src;\nelse\n    dest = (wstring *)src-&gt;storage.text;\n</code></pre></p>"},{"location":"Settlers4/GameLogic/","title":"Game Logic","text":""},{"location":"Settlers4/GameLogic/events/","title":"Event Handling","text":""}]}